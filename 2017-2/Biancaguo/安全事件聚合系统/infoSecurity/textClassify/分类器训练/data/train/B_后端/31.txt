商业转载请联系作者获得授权，非商业转载请注明出处。

1. Design for failure. 后端相当比例的代码不是为了一般情况下正确而存在，而是为了保证特殊或者极端情况下系统可接受的响应而存在的。这里有非常多的折衷要做：渐进改进还是超前设计？水平扩展？业务优化？前台还是后台处理？大量的折衷都是要根据不断变化的环境和需求去权衡的，所以很容易犯错。     2. Architecture is about abstract. 为什么要抽象？因为抽象的概念有更好的适应性，更易于复用，更能灵活适应变化。但是抽象是很难的，不恰当的抽象更是贻害无穷，要命的是，这些并没有很好的方法论，多数是依靠一组基本的原理，凭经验作出的。而 Web 后端开发在很长时间里并没有很重视这些，很多网站都是粗放型设计和开发出来的，所以补丁叠补丁的结构就顺理成章的成为了主流。     3. Architecture IS product. 架构本身即产品，一个软件产品包含了不同的视角，其中最重要的包括用户看到的视角、以及软件骨架即架构的视角。但产品就是产品，所有这些视角都是必须统一和一致的，这就要求架构必须理解产品的灵魂，而产品要理解架构的困难所在，否则很容易出现「想做的事情做不到」或者「以巨大的架构代价实现一个边角功能」这类悲剧。      其实这些问题就非常类似 Frederick Brooks 在《人月神话》中描述的所谓「根本性困难」，在短期内都会是主要的挑战